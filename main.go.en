/*
*
create by newlxj
2024-07-11 21:44
*
*/
package main

import (
	"bufio"
	"context"
	"crypto/rand"
	"fmt"
	"log"
	"math/big"
	"os"
	"os/exec"
	"path/filepath"
	"runtime"
	"strconv"
	"strings"
	"sync"
	"time"
)

var videoDir = "./"
var outTempDir = "outtemp" // Temporary directory
var newOutDir = "newout"

var videoType = "gif" // Output file type supports formats like mp4, gif, etc.
var frameNum = "30"   // Number of frames to extract from the video, will take an average of the total video duration
var videoSpeed = "2"  // GIF speed (1,2,3,4,5)
var videoSize = "256" // Scaling size for height and width (e.g., 256)

// Define an array of format names
var extensions = []string{
	".avi",
	".mp4",
	".mov",
	".mpg",
	".mpeg",
	".m4v",
	".mkv",
	".webm",
	".flv",
	".3gp",
	".3g2",
	".asf",
	".wmv",
	".wma",
	".ogg",
	".ogv",
	".ts",
	".m2ts",
	".mts",
	".mxf",
}

func getPath(fileName string) string {

	exePath, err := os.Executable()
	if err != nil {
		fmt.Println(err)
		// log.Fatal(err)
		// return ""
	}
	// Get the directory of the current executable
	exeDir := filepath.Dir(exePath)
	// Construct the path to ffmpeg

	os := runtime.GOOS
	switch os {
	case "windows":
		fileName = "fg/win/bin/" + fileName
	case "darwin":
		fileName = "fg/linux/bin/" + fileName
	case "linux":
		fileName = "fg/linux/bin/" + fileName
	default:
		log.Fatal("Current OS is unknown")
	}

	filex := filepath.Join(exeDir, fileName)
	return filex
}

// Get the total duration of the video (in seconds)
func getVideoDuration(videoPath string) (float64, error) {
	cmd := exec.Command(getPath("ffprobe.exe"), "-v", "error", "-show_entries", "format=duration", "-of", "default=noprint_wrappers=1:nokey=1", videoPath)
	output, err := cmd.Output()
	if err != nil {
		return 0, err
	}

	durationStr := strings.TrimSpace(string(output))
	duration, err := strconv.ParseFloat(durationStr, 64)
	if err != nil {
		return 0, err
	}

	return duration, nil
}

// Extract a frame at the specified time and save it as JPG
func extractFrame(videoPath, outputImagePath string, startTime float64, wg *sync.WaitGroup) {

	defer wg.Done()

	defer func() {
		if r := recover(); r != nil {
			log.Printf("Error extracting frame %s: %v", outputImagePath, r)
		}
	}()
	startTimeStr := fmt.Sprintf("%.2f", startTime)

	// Create a context with a timeout
	ctx, cancel := context.WithTimeout(context.Background(), 60*time.Second)
	defer cancel()

	cmd := exec.CommandContext(ctx, getPath("ffmpeg"), "-ss", startTimeStr, "-i", videoPath, "-vf", "scale="+videoSize+":-1", "-vframes", "1", "-q:v", "0", outputImagePath)
	err := cmd.Run()
	if err != nil {
		log.Printf("Failed to extract frame %s: %v", outputImagePath, err)
	} else {
		fmt.Printf("Extracted frame: %s (start time: %f seconds)\n", outputImagePath, startTime)
	}

	// Check if the failure was due to context timeout
	if ctx.Err() == context.DeadlineExceeded {
		log.Printf("Failed to extract frame %s: timeout", outputImagePath)
	}
}

// Merge JPG images into GIF, set playback speed for each frame
func createGifFromImages(imagePattern, outputFilePath string, delayStr string) error {

	ctx, cancel := context.WithTimeout(context.Background(), 60*time.Second)
	defer cancel()

	cmd := exec.CommandContext(ctx, getPath("ffmpeg"), "-y", "-framerate", videoSpeed+"/"+delayStr, "-i", imagePattern, "-vf", "scale="+videoSize+":-1,setpts=PTS/"+delayStr, outputFilePath)
	cmd.Run()
	// Check if the failure was due to context timeout
	if ctx.Err() == context.DeadlineExceeded {
		log.Printf("Failed to extract frame %s: timeout", imagePattern)
	}
	return nil
}

// Delete temporary JPG files
func deleteTempImages(imagePattern string) {
	files, err := filepath.Glob(imagePattern)
	if err != nil {
		log.Printf("Error finding temporary image files: %v", err)
		return
	}
	// log.Printf("Found files: %v", files)

	for _, file := range files {
		os.Remove(file)
		// if err != nil {
		// 	log.Printf("Failed to delete temporary image file %s: %v", file, err)
		// } else {
		// 	log.Printf("Successfully deleted temporary image file %s", file)
		// }
	}
}

// Generate a unique GIF file name
func generateUniqueGifName(basePath, videoPath string) string {
	videoPath = strings.ReplaceAll(videoPath, string(filepath.Separator), "_")
	videoPath = strings.ReplaceAll(videoPath, ".", "_")
	videoPath = strings.ReplaceAll(videoPath, ":", "_")
	videoPath = strings.ReplaceAll(videoPath, "&", "_")

	os := runtime.GOOS
	switch os {
	case "windows":
		if len(videoPath) > 800 {
			videoPath = videoPath[:800]
		}
	case "darwin":
		if len(videoPath) > 80 {
			videoPath = videoPath[:80]
		}
	case "linux":
		if len(videoPath) > 80 {
			videoPath = videoPath[:80]
		}
	default:
		fmt.Println("Current OS is unknown")
	}

	outputFilePath := filepath.Join(basePath, "ClipVideoFrame_"+videoPath+"."+videoType)
	// If the file already exists, add a random number suffix
	randNum, _ := rand.Int(rand.Reader, big.NewInt(10000))
	base := strings.TrimSuffix(filepath.Base(outputFilePath), "."+videoType)
	dir := filepath.Dir(outputFilePath)
	outputFilePath = filepath.Join(dir, fmt.Sprintf("%s_%d."+videoType, base, randNum))

	// for {
	// 	if _, err := os.Stat(outputFilePath); os.IsNotExist(err) {
	// 		break
	// 	}

	// }

	return outputFilePath
}

func goWork() {

	infoFilePath := "info.txt"
	// Create output directory
	if err := os.MkdirAll(outTempDir, os.ModePerm); err != nil {
		log.Fatalf("Failed to create directory %s: %v", outTempDir, err)
	}
	if err := os.MkdirAll(newOutDir, os.ModePerm); err != nil {
		log.Fatalf("Failed to create directory %s: %v", newOutDir, err)
	}

	// Read existing log records
	existingRecords := make(map[string]bool)

	if _, err := os.Stat(infoFilePath); err == nil {
		infoFile, err := os.Open(infoFilePath)
		if err != nil {
			log.Fatalf("Failed to read info.txt file: %v", err)
		}
		defer infoFile.Close()

		scanner := bufio.NewScanner(infoFile)
		for scanner.Scan() {
			record := scanner.Text()
			parts := strings.Split(record, ";")
			if len(parts) == 2 {
				existingRecords[parts[0]] = true
			}
		}

		if err := scanner.Err(); err != nil {
			log.Fatalf("Error reading info.txt file: %v", err)
		}
	}

	infoFile, err := os.OpenFile(infoFilePath, os.O_APPEND|os.O_CREATE|os.O_WRONLY, 0644)
	if err != nil {
		log.Fatalf("Failed to create/open info.txt file: %v", err)
	}
	defer infoFile.Close()

	err = filepath.Walk(videoDir, func(path string, info os.FileInfo, err error) error {
		if err != nil {
			return err
		}
		if !info.IsDir() {
			ext := strings.ToLower(filepath.Ext(info.Name()))
			if strings.Contains(strings.Join(extensions, "|"), strings.ToLower(ext)) {
				if existingRecords[path] {
					fmt.Printf("File already processed: %s, skipping...\n", path)
					return nil
				}

				videoPath := path
				duration, err := getVideoDuration(videoPath)
				if err != nil {
					log.Printf("Error getting video duration: %v", err)
					return nil // Continue processing the next file
				}

				fmt.Printf("Total video duration: %f seconds\n", duration)

				// Calculate the start time for each frame
				frameCount := 30
				interval := duration / float64(frameCount+1)

				var wg sync.WaitGroup
				wg.Add(frameCount)

				// Get the current time as a string
				currentTime := time.Now().Format("20060102150405")
				// Generate a 10-digit random number
				randomNumber, _ := rand.Int(rand.Reader, big.NewInt(10000000))

				// Combine the current time and the 10-digit random number
				videoName := fmt.Sprintf("%s%010d", currentTime, randomNumber)

				// // Check the length of the string to avoid out-of-bounds
				// if len(videoName) > 80 {
				// 	videoName = videoName[:80]
				// }

				// Extract frames in parallel and save them as JPG
				for i := 0; i < frameCount; i++ {
					startTime := interval * float64(i+1)
					outputImagePath := fmt.Sprintf("%s/%s_frame_%03d.jpg", outTempDir, videoName, i+1)
					// wg.Add(1)
					go extractFrame(videoPath, outputImagePath, startTime, &wg)
				}

				wg.Wait()
				// Merge JPG images into GIF
				imagePattern := fmt.Sprintf("%s/%s_frame_%%03d.jpg", outTempDir, videoName)
				outputFilePath := generateUniqueGifName(newOutDir, videoPath)

				err = createGifFromImages(imagePattern, outputFilePath, "0.002")
				if err != nil {
					log.Printf("Error merging JPG images: %v", err)
					deleteTempImages(fmt.Sprintf("%s/%s_frame_*.jpg", outTempDir, videoName))
					return nil // Continue processing the next file
				}
				fmt.Printf("Generated file: %s\n", outputFilePath)

				// Delete temporary JPG files
				deleteTempImages(fmt.Sprintf("%s/%s_frame_*.jpg", outTempDir, videoName))

				// Record information in the info.txt file
				_, err = fmt.Fprintf(infoFile, "%s;%s\n", videoPath, outputFilePath)
				if err != nil {
					log.Printf("Failed to write to info.txt file: %v", err)
					return nil // Continue processing the next file
				}
			}
		}
		return nil
	})

	if err != nil {
		fmt.Println("Error scanning directory: the input path may not exist", err)
	}
}

func main() {
	fmt.Println("\r\n\r\n\r\n\r\n\r\n\r\n\r\n")
	fmt.Println("Video file frame extraction tool, can extract multiple frames from a video and merge them into mp4, gif output")
	fmt.Println("Can run with parameters: cutvideo ./ ./outvideo 30 2 gif 256")
	fmt.Println("Parameters: folder location output folder location frame number video speed (1,2,3,4,5) output file format (gif,mp4) height and width scaling size (e.g., 256)")
	fmt.Println("\r\n\r\n\r\n\r\n\r\n\r\n\r\n")
	// Pass parameters: folder location output folder location frame number video speed (1,2,3,4,5) output file format (gif,mp4) height and width scaling size (e.g., 256)
	args := os.Args
	if len(args) > 6 {
		videoDir = args[1]
		newOutDir = args[2]
		frameNum = args[3]
		videoSpeed = args[4]
		videoType = args[5]
		videoSize = args[6]
	} else {
		fmt.Println("Please enter the relevant parameters for video frame extraction and conversion:")
		fmt.Println(fmt.Sprintf("Folder path (default: %s): ", videoDir))
		fmt.Scanln(&videoDir)
		fmt.Println(fmt.Sprintf("Output folder (default: %s): ", newOutDir))
		fmt.Scanln(&newOutDir)
		fmt.Println(fmt.Sprintf("Number of frames (default: %s): ", frameNum))
		fmt.Scanln(&frameNum)
		fmt.Println(fmt.Sprintf("Video playback speed for each frame (1,2,3,4,5 default: %s): ", videoSpeed))
		fmt.Scanln(&videoSpeed)
		fmt.Println(fmt.Sprintf("Video output type (mp4, gif, default: %s): ", videoType))
		fmt.Scanln(&videoType)
		fmt.Println(fmt.Sprintf("Scaling size for height and width (default: %s): ", videoSize))
		fmt.Scanln(&videoSize)
	}

	goWork()
	fmt.Println("Task completed, please check the output folder", newOutDir)
	time.Sleep(240 * time.Second)
}
